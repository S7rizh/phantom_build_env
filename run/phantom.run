# #assert_spec x86
# # assert_spec nova
# 
# 
# if {[get_cmd_switch --autopilot] && ![have_include "power_on/qemu"]} {
# 	puts "\n Run script is not supported on this platform. \n";
# 	exit 0
# }
# 
# #
# # Build
# #
# 
# create_boot_directory
# 
# set build_components {
# 	core init timer app/phantom
# 	server/report_rom
# 	drivers/platform
# 	drivers/acpi
# 	drivers/ahci
# 	app/pci_decode
# }
# 
# build $build_components
# 
# 
# #
# # Generate config
# #
# 
# # <service name="ROM"/>
# # <service name="RAM"/>
# # <service name="IRQ"/>
# # <service name="IO_MEM"/>
# # <service name="IO_PORT"/>
# # <service name="CAP"/>
# # <service name="PD"/>
# # <service name="RM"/>
# # <service name="CPU"/>
# # <service name="LOG"/>
# # <service name="SIGNAL" />
# 
# append config {
# <config>
# 	<parent-provides>
# 		<service name="ROM"/>
# 		<service name="IRQ"/>
# 		<service name="IO_MEM"/>
# 		<service name="IO_PORT"/>
# 		<service name="PD"/>
# 		<service name="RM"/>
# 		<service name="CPU"/>
# 		<service name="LOG"/>
# 	</parent-provides>
# 	<default-route>
# 		<any-service> <parent/> <any-child/> </any-service>
# 	</default-route>
# 
# 	<default caps="100"/>
# 
# 	<start name="timer">
# 		<resource name="RAM" quantum="1M"/>
# 		<provides><service name="Timer"/></provides>
# 	</start>
# }
# 
# 
# append config {
# 	<start name="report_rom">
# 		<resource name="RAM" quantum="2M"/>
# 		<provides> <service name="Report"/> <service name="ROM"/> </provides>
# 		<config>
# 			<policy label="pci_decode -> system"    report="acpi_drv -> acpi"/>
# 			<policy label="platform_drv -> devices" report="pci_decode -> devices"/>
# 		</config>
# 	</start>
# 
# 	<start name="acpi_drv" caps="350">
# 		<resource name="RAM" quantum="4M"/>
# 		<route>
# 			<service name="Report"> <child name="report_rom"/> </service>
# 			<service name="IO_MEM"> <parent/> </service>
# 			<service name="LOG">    <parent/> </service>
# 			<service name="PD">     <parent/> </service>
# 			<service name="RM">     <parent/> </service>
# 			<service name="CPU">    <parent/> </service>
# 			<service name="ROM">    <parent/> </service>
# 		</route>
# 	</start>
# 
# 	<start name="pci_decode" caps="350">
# 		<resource name="RAM" quantum="2M"/>
# 		<route>
# 			<service name="Report">             <child name="report_rom"/> </service>
# 			<service name="ROM" label="system"> <child name="report_rom"/> </service>
# 			<service name="IO_MEM"> <parent/> </service>
# 			<service name="LOG">    <parent/> </service>
# 			<service name="PD">     <parent/> </service>
# 			<service name="RM">     <parent/> </service>
# 			<service name="CPU">    <parent/> </service>
# 			<service name="ROM">    <parent/> </service>
# 		</route>
# 	</start>
# 
# 	<start name="platform_drv" caps="100" managing_system="yes">
# 		<resource name="RAM" quantum="1M"/>
# 		<provides>
# 			<service name="Platform"/>
# 		</provides>
# 		<route>
# 			<service name="ROM" label="devices"> <child name="report_rom"/> </service>
# 			<service name="Report"> <child name="report_rom"/> </service>
# 			<service name="IRQ">     <parent/> </service>
# 			<service name="IO_MEM">  <parent/> </service>
# 			<service name="IO_PORT"> <parent/> </service>
# 			<service name="ROM">     <parent/> </service>
# 			<service name="PD">      <parent/> </service>
# 			<service name="CPU">     <parent/> </service>
# 			<service name="LOG">     <parent/> </service>
# 			<service name="Timer">   <child name="timer"/> </service>
# 		</route>
# 		<config>
# 			<report devices="yes"/>
# 			<policy label="ahci_drv -> "> <pci class="AHCI"/> </policy>
# 		</config>
# 	</start>
# 
# 	<start name="ahci_report_rom">
# 		<binary name="report_rom"/>
# 		<resource name="RAM" quantum="1M"/>
# 		<provides> <service name="Report"/> <service name="ROM"/> </provides>
# 		<config verbose="yes"/>
# 	</start>
# 
# 	<start name="ahci_drv">
# 		<resource name="RAM" quantum="10M" />
# 		<provides><service name="Block" /></provides>
# 		<config atapi="yes">
# 			<report ports="yes"/>
# 			<policy label="isomem -> " device="0" writeable="yes" />
# 			<!-- <policy label="test-ahci -> " device="0" writeable="yes" /> -->
# 			<!-- <policy label="test-ahci-atapi -> " device="1" writeable="no" /> -->
# 		</config>
# 		<route>
# 			<service name="Report"> <child name="ahci_report_rom"/> </service>
# 			<any-service> <parent/> <any-child/> </any-service>
# 		</route>
# 	</start>
# }
# 
# # append config {
# # 	<start name="part_block0">
# # 		<binary name="part_block"/>
# # 		<resource name="RAM" quantum="10M" />
# # 		<provides><service name="Block" /></provides>
# # 		<route>
# # 			<service name="Report"><child name="block_report_rom"/></service>}
# # 			append config "
# # 			<service name=\"Block\"><child name=\"$drv0\"/></service>"
# # 			append config {
# # 			<any-service><parent/><any-child/></any-service>
# # 		</route>
# # 		<config io_buffer="2M">
# # 			<report partitions="yes"/>
# # 			<policy label="test-part1 -> " partition="1" writeable="yes" />
# # 			<policy label="isomem -> " partition="1" writeable="yes"/>
# # 		</config>
# # 	</start>
# # }
# 
# append config {
# 	<start name="isomem" caps="2000">
# 		<resource name="RAM" quantum="700M"/>
# 
# 		<config verbose="yes" ld_verbose="yes">
# 			<vfs>
# 				<dir name="dev"> <log/> </dir>
# 				<dir name="pcode">
# 				<dir name="plib">
# 					<dir name="bin">
# 					<tar name="phantom_bins.tar" />
# 					</dir>
# 				</dir>
# 				</dir>
# 
# 				<tar name="phantom_bins.tar" />
# 			</vfs>
# 
# 
# 		</config>
# 		<route>
# 			<service name="Block"><child name="ahci_drv"/></service>
# 			<any-service> <parent/> <any-child /> </any-service>
# 		</route>
# 	</start>
# }
# 
# append config {
# </config>
# }
# 
# 
# install_config $config
# 
# 
# # import_from_depot [depot_user]/src/[base_src] \
# #                   [depot_user]/pkg/terminal \
# #                   [depot_user]/src/init \
# #                   [depot_user]/src/posix \
# #                   [depot_user]/src/vfs \
# #                   [depot_user]/src/fs_rom
# 
# #
# # Boot image
# #
# 
# set boot_modules {
# 	core init ld.lib.so
# 	vfs.lib.so
# 	timer
# 	isomem
# 	report_rom
# 	pci_decode platform_drv report_rom acpi_drv
# 	ahci_drv report_rom
# 	phantom_bins.tar
# 	phantom_classes
# }
# 
# build_boot_image $boot_modules
# 
# #
# # QEMU
# #
# 
# # Debugging with qemu gdb stub
# # append qemu_args " -s -S "
# # append qemu_args " -smp threads=1 "
# append qemu_args " -smp 1 "
# 
# append qemu_args " -nographic -m 1024 -nographic"
# 
# # append qemu_args " -drive id=disk,file=bin/block0.raw,format=raw,if=none \
# #                    -drive id=disk2,file=bin/block1.raw,format=raw,if=none \
# #                    -device ahci,id=ahci -device ide-hd,drive=disk,bus=ahci.0 \
# #                    -device ide-hd,drive=disk2,bus=ahci.1 -boot d"
# 
# append qemu_args  " -device ahci,id=ahci -boot d \
# 					-drive id=disk,file=bin/block0.raw,format=raw,if=none \
#                     -device ide-hd,drive=disk,bus=ahci.0 "
# 
# run_genode_until forever



assert_spec x86

create_boot_directory
build {
	core init timer
	drivers/platform
	drivers/acpi
	drivers/ahci
	drivers/rtc
	app/pci_decode
	server/report_rom
	app/phantom
}

#
# Build EXT2-file-system image
#

# set mke2fs [installed_command mke2fs]
# set dd     [installed_command dd]
# catch { exec $dd if=/dev/zero of=bin/ext2.raw bs=1M count=16 }
# catch { exec $mke2fs -F bin/ext2.raw }

install_config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="timer" priority="0">
		<resource name="RAM" quantum="1M"/>
		<resource name="CPU" quantum="5"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="rtc_drv" priority="-1">
		<resource name="RAM" quantum="1M"/>
		<provides>
			<service name="Rtc"/>
		</provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config>
			<policy label="pci_decode -> system"    report="acpi_drv -> acpi"/>
			<policy label="platform_drv -> devices" report="pci_decode -> devices"/>
		</config>
	</start>

	<start name="acpi_drv" caps="350">
		<resource name="RAM" quantum="4M"/>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
		</route>
	</start>

	<start name="pci_decode" caps="350">
		<resource name="RAM" quantum="2M"/>
		<route>
			<service name="Report">             <child name="report_rom"/> </service>
			<service name="ROM" label="system"> <child name="report_rom"/> </service>
			<service name="IO_MEM"> <parent/> </service>
			<service name="LOG">    <parent/> </service>
			<service name="PD">     <parent/> </service>
			<service name="RM">     <parent/> </service>
			<service name="CPU">    <parent/> </service>
			<service name="ROM">    <parent/> </service>
		</route>
	</start>

	<start name="platform_drv" caps="100" managing_system="yes">
		<resource name="RAM" quantum="1M"/>
		<provides>
			<service name="Platform"/>
		</provides>
		<route>
			<service name="ROM" label="devices"> <child name="report_rom"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="IRQ">     <parent/> </service>
			<service name="IO_MEM">  <parent/> </service>
			<service name="IO_PORT"> <parent/> </service>
			<service name="ROM">     <parent/> </service>
			<service name="PD">      <parent/> </service>
			<service name="CPU">     <parent/> </service>
			<service name="LOG">     <parent/> </service>
			<service name="Timer">   <child name="timer"/> </service>
		</route>
		<config>
			<report devices="yes"/>
			<policy label="ahci_drv -> "> <pci class="AHCI"/> </policy>
		</config>
	</start>

	<start name="ahci_report_rom">
		<binary name="report_rom"/>
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="ahci_drv">
		<resource name="RAM" quantum="10M" />
		<provides><service name="Block" /></provides>
		<config atapi="no">
			<report ports="yes"/>
			<policy label="isomem -> " device="0" writeable="yes" />
		</config>
		<route>
			<service name="Report"> <child name="ahci_report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

 	<start name="isomem" caps="2000">
 		<resource name="RAM" quantum="700M"/>
 
 		<config verbose="yes" ld_verbose="yes">
 		</config>
 		<route>
 			<service name="Block"><child name="ahci_drv"/></service>
 			<any-service> <parent/> <any-child /> </any-service>
 		</route>
 	</start>


</config> }

#
# Boot modules
#
build_boot_image {
	core ld.lib.so init timer rtc_drv
	pci_decode platform_drv report_rom acpi_drv
	ahci_drv report_rom 
 	vfs.lib.so
  	isomem
  	phantom_classes }

append qemu_args " -smp 2 "
# append qemu_args " -s -S "
# append qemu_args " -m 1024 "
append qemu_args " -nographic -device ahci,id=ahci -boot d "
# append qemu_args " -drive id=disk,file=bin/ext2.raw,format=raw,if=none             -device ide-hd,drive=disk,bus=ahci.0 "
append qemu_args " -drive id=disk,file=bin/block0.raw,format=raw,if=none             -device ide-hd,drive=disk,bus=ahci.0 "
# append qemu_args " -drive id=cd,file=[run_dir]/../ahci_block.iso,if=none,media=cdrom -device ide-cd,drive=cd,bus=ahci.1 "

run_genode_until forever