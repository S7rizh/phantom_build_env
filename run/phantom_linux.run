# assert_spec x86
# assert_spec nova

# Can be used for debugging disk operations
set use_linux [have_spec linux]

if {[get_cmd_switch --autopilot] && ![have_include "power_on/qemu"]} {
	puts "\n Run script is not supported on this platform. \n";
	exit 0
}

#
# Check used commands
#
set dd     [installed_command dd]
set sfdisk [installed_command sfdisk]
set sgdisk [installed_command sgdisk]

set drv0 "ahci_drv"
set drv1 "ahci_drv"

if { $use_linux } {
	set drv0 "lx_block0"
	set drv1 "lx_block1"
}

#
# Build
#

set build_components {
  core init timer app/phantom
	drivers/ahci
	server/lx_block
}
	# server/vfs
	# server/fs_rom

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

#
# disk0 is MBR, disk1 is GPT
#
proc create_disk_image {number} { 
	global dd
	global sfdisk
	global sgdisk

	catch { exec $dd if=/dev/zero of=bin/block$number.raw bs=1M count=0 seek=2048 }


	# Creating clear partition table
	exec -ignorestderr $sgdisk --clear bin/block$number.raw
	# Initializing partition from 4kB to 500MB-4kB
	# exec $sgdisk -n1:4096:524270592 bin/block$number.raw
	exec -ignorestderr $sgdisk -n1:2048:4194270 bin/block$number.raw


	catch {
		# Writing image at 2048 * 512 + 16 * 4096 (start_of_partition + superblock_position)
		exec $dd conv=nocreat conv=notrunc bs=512 count=8 seek=2176 if=bin/phantom.superblock of=bin/block$number.raw
	}
}

create_boot_directory

#
# Generate config
#
append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append_if $use_linux config {
	<start name="lx_block0" ld="no">
		<binary name="lx_block"/>
		<resource name="RAM" quantum="2G"/>
		<provides><service name="Block"/></provides>
		<config ld_verbose="yes" verbose="yes" file="block0.raw" block_size="512" writeable="yes"/>
	</start>
}

# append_if $use_linux config {
# 	<start name="vfs" caps="200">
# 		<resource name="RAM" quantum="12M" />
# 		<provides><service name="File_system"/></provides>
# 		<config>
# 			<vfs> 
# 				<tar name="phantom_bins.tar" />
# 			</vfs>
# 			<policy label_prefix="fs_rom" root="/" writeable="no"/>
# 		</config>
# 	</start>
# 	<start name="fs_rom">
# 		<resource name="RAM" quantum="2M"/>
# 		<provides><service name="ROM"/></provides>
# 	</start>
# }
 


append config {
   <start name="isomem" caps="500">
     <resource name="RAM" quantum="500M"/>
     <config verbose="yes" ld_verbose="yes">
     </config>
		<route>
			<service name="Block"><child name="lx_block0"/></service>
			<service name="ROM" label_prefix="/"> <child name="fs_rom"/> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
   </start>
}

append config {
</config>
}


install_config $config

# create_disk_image 0
# create_disk_image 1


# import_from_depot [depot_user]/src/[base_src] \
#                   [depot_user]/pkg/terminal \
#                   [depot_user]/src/init \
#                   [depot_user]/src/posix \
#                   [depot_user]/src/vfs \
#                   [depot_user]/src/fs_rom

#
# Boot image
#

set boot_modules {
  core init ld.lib.so
  timer
  vfs.lib.so
  isomem
  phantom_bins.tar

  phantom_classes

}
  # vfs
  # fs_rom

  # ahci_drv block_tester
  # part_block

append_if $use_linux boot_modules {
	block0.raw block1.raw lx_block
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# QEMU
#

append qemu_args " -nographic -m 1024 -nographic"

append qemu_args " -drive id=disk,file=bin/block0.raw,format=raw,if=none \
                   -drive id=disk2,file=bin/block1.raw,format=raw,if=none \
                   -device ahci,id=ahci -device ide-hd,drive=disk,bus=ahci.0 \
                   -device ide-hd,drive=disk2,bus=ahci.1 -boot d"

run_genode_until forever
